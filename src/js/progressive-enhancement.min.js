class t{static enhance(t,e){return class extends t{constructor(...t){super(...t),this.analytics=null,this.initializeEnhancements(e)}async initializeEnhancements(t={}){"undefined"!=typeof AnalyticsTracker&&!1!==t.analytics&&(this.analytics=new AnalyticsTracker({debug:t.debug||!1})),this.features={analytics:!!this.analytics,localStorage:this.isLocalStorageAvailable(),serviceWorker:"serviceWorker"in navigator}}async enhancedMethod(t,e,...s){const i=Date.now();try{this.trackMethodStart(e);const r=await t.apply(this,s);return this.trackMethodSuccess(e,i),r}catch(r){throw this.trackMethodError(e,r,i),r}}trackMethodStart(t){this.analytics&&this.analytics.track(s.METHOD_START,{method:t,className:this.constructor.name})}trackMethodSuccess(t,e){this.analytics&&this.analytics.track(s.METHOD_SUCCESS,{method:t,className:this.constructor.name,executionTime:Date.now()-e})}trackMethodError(t,e,i){this.analytics&&this.analytics.track(s.METHOD_ERROR,{method:t,className:this.constructor.name,error:e.message,executionTime:Date.now()-i})}isLocalStorageAvailable(){try{const t="__test__";return localStorage.setItem(t,t),localStorage.removeItem(t),!0}catch(t){return!1}}}}static enhanceFormValidator(t){return this.enhance(t,{analytics:!0})}static enhanceThemeManager(t){const e=this.enhance(t,{analytics:!0});return class extends e{toggleTheme(){const t=this.currentTheme,e=super.toggleTheme();return this.analytics&&this.analytics.track(s.THEME_CHANGED,{from:t,to:this.currentTheme,timestamp:Date.now()}),e}}}static enhanceSmoothNavigation(t){const e=this.enhance(t,{analytics:!0});return class extends e{handleNavClick(t){const e=t.target.getAttribute("href");this.analytics&&this.analytics.track(s.NAV_CLICK,{target:e,source:"smooth_navigation"})}}}}const e=/^[^\s@]+@[^\s@]+\.[^\s@]+$/,s={FORM_INIT:"form_initialized",SUBMISSION_START:"form_submission_start",SUBMISSION_SUCCESS:"form_submission_success",SUBMISSION_ERROR:"form_submission_error",METHOD_START:"method_execution_start",METHOD_SUCCESS:"method_execution_success",METHOD_ERROR:"method_execution_error",THEME_CHANGED:"theme_changed",NAV_CLICK:"navigation_click"};class i{constructor(t,e={}){this.form=document.querySelector(t),this.errors={},this.options={useApiSubmission:!0,apiEndpoint:"/api/contact",...e},this.options.enableAnalytics&&"undefined"!=typeof AnalyticsTracker&&(this.analytics=new AnalyticsTracker),this.form&&this.init()}init(){this.setupValidation(),this.setupSubmission(),this.analytics&&this.analytics.track(s.FORM_INIT,{formType:this.form.getAttribute("name")||"contact"})}setupValidation(){this.form.querySelectorAll("input, textarea").forEach(t=>{t.addEventListener("blur",()=>{this.validateField(t)}),t.addEventListener("input",()=>{this.clearFieldError(t)})})}setupSubmission(){this.form.addEventListener("submit",async t=>{t.preventDefault(),await this.handleSubmit()})}async handleSubmit(){if(!this.validateForm())return;const t=this.getFormData(),e=Date.now();try{this.setLoadingState(!0),this.trackSubmissionStart();const s=await this.executeSubmission(t);this.handleSubmissionSuccess(s,e)}catch(s){this.handleSubmissionError(s,e)}finally{this.setLoadingState(!1)}}trackSubmissionStart(){this.analytics&&this.analytics.track(s.SUBMISSION_START,{formType:this.getFormType()})}async executeSubmission(t){return this.options.useApiSubmission?await this.submitToAPI(t):await this.submitTraditional(t)}handleSubmissionSuccess(t,e){this.trackSubmissionSuccess(e),this.showSuccess(t.message||"Thank you for your message!"),this.resetForm()}handleSubmissionError(t,e){this.trackSubmissionError(t,e),this.showError("Failed to send message. Please try again.")}trackSubmissionSuccess(t){this.analytics&&this.analytics.track(s.SUBMISSION_SUCCESS,{formType:this.getFormType(),submissionTime:Date.now()-t,method:this.options.useApiSubmission?"api":"traditional"})}trackSubmissionError(t,e){this.analytics&&this.analytics.track(s.SUBMISSION_ERROR,{formType:this.getFormType(),error:t.message,submissionTime:Date.now()-e})}getFormType(){return this.form.getAttribute("name")||"contact"}async submitToAPI(t){const e=await fetch(this.options.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const t=await e.json().catch(()=>({}));throw new Error(t.message||`HTTP ${e.status}`)}return await e.json()}async submitTraditional(t){const e=this.form.getAttribute("action");if(!e)throw new Error("No submission endpoint configured");const s=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok)throw new Error(`HTTP ${s.status}`);return{success:!0,message:"Message sent successfully!"}}validateForm(){const t=this.form.querySelectorAll("input[required], textarea[required]");let e=!0;return t.forEach(t=>{this.validateField(t)||(e=!1)}),e}validateField(t){const e=t.value.trim(),s=t.getAttribute("name");if(this.clearFieldError(t),this.isFieldRequiredAndEmpty(t,e))return this.setFieldError(t,`${s} is required`),!1;if(this.isInvalidEmail(t,e))return this.setFieldError(t,"Please enter a valid email address"),!1;const i=this.getLengthValidationError(t,e);return!i||(this.setFieldError(t,i),!1)}isFieldRequiredAndEmpty(t,e){return t.hasAttribute("required")&&!e}isInvalidEmail(t,e){return"email"===t.type&&e&&!this.isValidEmailFormat(e)}isValidEmailFormat(t){return e.test(t)}getLengthValidationError(t,e){if(0===e.length)return null;const s=t.getAttribute("minlength"),i=t.getAttribute("maxlength");return s&&e.length<parseInt(s)?`Minimum ${s} characters required`:i&&e.length>parseInt(i)?`Maximum ${i} characters allowed`:null}setFieldError(t,e){t.classList.add("error");let s=t.parentNode.querySelector(".field-error");s||(s=document.createElement("div"),s.className="field-error",t.parentNode.appendChild(s)),s.textContent=e}clearFieldError(t){t.classList.remove("error");const e=t.parentNode.querySelector(".field-error");e&&e.remove()}getFormData(){const t=new FormData(this.form),e={};for(const[s,i]of t.entries())e[s]=i;return e}setLoadingState(t){const e=this.getSubmitButton();e&&(this.updateSubmitButton(e,t),this.updateFormClasses(t))}getSubmitButton(){return this.form.querySelector('button[type="submit"]')}updateSubmitButton(t,e){t.disabled=e,t.textContent=e?"Sending...":"Send Message"}updateFormClasses(t){t?this.form.classList.add("loading"):this.form.classList.remove("loading")}showSuccess(t){this.showMessage(t,"success")}showError(t){this.showMessage(t,"error")}showMessage(t,e){const s=this.form.querySelector(".form-message");s&&s.remove();const i=document.createElement("div");i.className=`form-message form-message-${e}`,i.textContent=t,this.form.appendChild(i),setTimeout(()=>{i.remove()},5e3)}resetForm(){this.form.reset(),this.clearAllErrors()}clearAllErrors(){this.form.querySelectorAll(".field-error").forEach(t=>t.remove()),this.form.querySelectorAll(".error").forEach(t=>t.classList.remove("error"))}}"undefined"!=typeof window&&(window.ProgressiveEnhancement=t,window.EnhancedFormValidator=i,document.addEventListener("DOMContentLoaded",()=>{document.querySelector("#contact-form, .contact-form")&&(window.enhancedFormValidator=new i("#contact-form, .contact-form"))})),"undefined"!=typeof module&&module.exports&&(module.exports={ProgressiveEnhancement:t,EnhancedFormValidator:i});